#! {"lang":"module"}

/*
    TODO:
    - Add IP filtering
    - Add per-app downtime
    - Add global and per-app time limits
    - Prevent blocked apps from being installed via the marketplace
    - Add a whitelist-based alternative
*/

const { need, after } = await anura.import("anura.daemon.helpers");

export const name = "apc";
export const provides = [];
export const description = "Anura Parental Controls";

export const depend = async () => {
    await need("anura.net");
    await need("anura.notifications");
    await after("anura.boot");
};

/*
Example config:
{
    "blocked": {
        "apps": ["anura.ashell"], // List of package IDs
        "urls": ["https://example.com", "discord.com"]
    },
    "downtime": {
        "start": "22:00", // 10 PM
        "end": "07:00" // 7 AM
    }
}
*/
self.conf = anura.settings.get("apc-conf") || {};
self.cacheConf = JSON.stringify(anura.settings.get("apc-conf") || {});
self.blocked = [];

const parseTime = (str) => {
    const [h, m] = str.split(":").map(Number);
    return h * 60 + m;
};

const inDowntime = () => {
    if (
        !self.conf?.downtime?.start ||
        !self.conf?.downtime?.end
    ) {
        return false;
    }

    const now = new Date();
    const current = now.getHours() * 60 + now.getMinutes();
    const start = parseTime(self.conf.downtime.start);
    const end = parseTime(self.conf.downtime.end);

    return start < end
        ? current >= start && current < end
        : current >= start || current < end;
};

const enforceDowntime = () => {
    anura.wm.windows.forEach(ref => ref.deref().close());

    Object.entries(anura.apps).forEach(([_pkg, app]) => {
        if (typeof app.open === "function") {
            app.open = () => {
                anura.notifications.add({
                    title: "Downtime",
                    description: `All apps are blocked during downtime`,
                    timeout: 3000,
                });

                return;
            };
        }

        delete app.__proto__.open; // Stupid bypass
    });
};

const fixUrls = () => {
    self.blocked = [];

    self.conf.blocked?.urls?.forEach((url, i) => {
        if (
            url.startsWith("http://") ||
            url.startsWith("https://") ||
            url.startsWith("ws://") ||
            url.startsWith("wss://")
        ) {
            self.blocked[i] = new URL(url).host;
        } else {
            self.blocked[i] = url;
        }
    });
}

const enforceNet = () => {
    // OG function calls
    const NetWebSocket = anura.net.WebSocket;
    const NetTLSSocket = anura.net.TLSSocket;
    const NetFetch = anura.net.fetch;
    const LibCurlFetch = anura.net.libcurl.fetch;
    const LibCurlCurlWebSocket = anura.net.libcurl.CurlWebSocket;
    const LibCurlWebSocket = anura.net.libcurl.WebSocket;
    const LibCurlTLSSocket = anura.net.libcurl.TLSSocket;

    const notify = (type, url) => {
        anura.notifications.add({
            title: `${type} Blocked`,
            description: `The connection to '${url}' is blocked by Anura Parental Controls`,
            timeout: 3000,
        });
    };

    // Hijacks
    anura.net.WebSocket = class extends NetWebSocket {
        constructor(url, protocols) {
            const host = new URL(url.toString()).host;

            if (self.blocked.includes(host)) {
                notify("WebSocket", url.toString());
                throw new Error(`Blocked connection to: ${url}`);
            }

            super(url, protocols);
        }
    };

    anura.net.libcurl.WebSocket = class extends LibCurlWebSocket {
        constructor(url, protocols) {
            const host = new URL(url.toString()).host;

            if (self.blocked.includes(host)) {
                notify("LibCurl WebSocket", url.toString());
                throw new Error(`Blocked connection to: ${url}`);
            }

            super(url, protocols);
        }
    };

    anura.net.libcurl.CurlWebSocket = class extends LibCurlCurlWebSocket {
        constructor(url, protocols, opts) {
            const host = new URL(url.toString()).host;

            if (self.blocked.includes(host)) {
                notify("LibCurl CurlWebSocket", url.toString());
                throw new Error(`Blocked connection to: ${url}`);
            }

            super(url, protocols, opts);
        }
    };

    anura.net.TLSSocket = class extends NetTLSSocket {
        constructor(host, port, opts) {
            if (host && self.blocked.includes(host)) {
                notify("TLSSocket", host);
                throw new Error(`Blocked connection to: ${host}`);
            }

            super(host, port, opts);
        }
    };

    anura.net.libcurl.TLSSocket = class extends LibCurlTLSSocket {
        constructor(host, port, opts) {
            if (host && self.blocked.includes(host)) {
                notify("LibCurl TLSSocket", host);
                throw new Error(`Blocked connection to: ${host}`);
            }

            super(host, port, opts);
        }
    };

    anura.net.fetch = (...args) => {
        const req = new Request(...args);
        const host = new URL(req.url).host;
        const pathname = new URL(req.url).pathname;

        if (self.blocked.includes(host)) {
            if (pathname !== "/favicon.ico") { // Stupid and weird
                notify("Fetch", req.url);
            }

            return Promise.reject(new Error(`Blocked connection to: ${req.url}`));
        }

        return NetFetch(...args);
    };

    anura.net.libcurl.fetch = (...args) => {
        const req = new Request(...args);
        const host = new URL(req.url).host;
        const pathname = new URL(req.url).pathname;

        if (self.blocked.includes(host)) {
            if (pathname !== "/favicon.ico") {
                notify("LibCurl Fetch", req.url);
            }

            return Promise.reject(new Error(`Blocked connection to: ${req.url}`));
        }

        return LibCurlFetch(...args);
    };

    if (anura.net.libcurl?.HTTPSession?.prototype?.fetch) {
        const LibCurlHTTPSession = anura.net.libcurl.HTTPSession.prototype.fetch;

        anura.net.libcurl.HTTPSession.prototype.fetch = function (...args) {
            let url;

            try {
                const input = args[0];

                if (typeof input === "string") {
                    url = this.base_url ? new URL(input, this.base_url).href : new URL(input).href;
                } else if (input?.url) {
                    url = new URL(input.url).href;
                }

                const parsed = new URL(url);
                const host = parsed.host;
                const pathname = parsed.pathname;

                if (self.blocked.includes(host)) {
                    if (pathname !== "/favicon.ico") {
                        notify("LibCurl HTTPSession", url);
                    }

                    return Promise.reject(new Error(`Blocked connection to: ${url}`));
                }
            } catch (err) {
                console.warn("Failed to parse URL:", err);
            }

            return LibCurlHTTPSession.apply(this, args);
        };
    }
};

const blockApps = () => {
    Object.entries(anura.apps).forEach(([pkg, app]) => {
        if (typeof app.open === "function") {
            const bind = app.open.bind(app);

            app.open = (...args) => {
                if (self.conf.blocked?.apps?.includes(pkg)) {
                    anura.notifications.add({
                        title: "App Blocked",
                        description: `The app '${pkg}' is blocked by Anura Parental Controls`,
                        timeout: 3000,
                    });

                    delete app.__proto__.open;
                    return;
                }

                return bind(...args);
            };
        }
    });
}

const run = async () => {
    if (inDowntime()) enforceDowntime();
    fixUrls();
    enforceNet();
    blockApps();
};

export const start = () => {
    anura.notifications.add({
        title: "Anura Parental Controls",
        description: `Anura Parental Controls is now active`,
        timeout: 3000,
    });

    if (inDowntime()) {
        anura.notifications.add({
            title: "Downtime",
            description: `All apps are blocked during downtime`,
            timeout: 3000,
        });
    }

    setInterval(() => {
        const conf = anura.settings.get("apc-conf") || {};
        const parsed = JSON.stringify(conf);

        if (parsed !== self.cacheConf) {
            self.conf = conf;
            self.cacheConf = parsed;

            run();
        }
    }, 1000);
};

export const stop = () => {
    anura.notifications.add({
        title: "Anura Parental Controls",
        description: `Anura Parental Controls is now stopping`,
        timeout: 3000,
    });
};
